#!/usr/bin/env python3
"""
Setup script for the Cita Bot environment variables
This script helps you create a .env file with your configuration
"""

import os
import sys

def get_input(prompt, default=""):
    """Get user input with a default value"""
    if default:
        user_input = input(f"{prompt} [{default}]: ").strip()
        return user_input if user_input else default
    else:
        return input(f"{prompt}: ").strip()

def create_env_file():
    """Create a .env file with user input"""
    print("üéØ Cita Bot Environment Setup")
    print("=" * 50)
    print("This script will help you create a .env file with your configuration.")
    print("Press Enter to use default values where available.\n")
    
    # Get user input
    config = {}
    
    print("üîë REQUIRED: AntiCaptcha API Key")
    print("Get your API key from: https://anti-captcha.com/")
    config["ANTICAPTCHA_API_KEY"] = get_input("Enter your AntiCaptcha API key")
    
    if not config["ANTICAPTCHA_API_KEY"]:
        print("‚ùå Error: AntiCaptcha API key is required!")
        return False
    
    print("\nüë§ Personal Information")
    config["NIE"] = get_input("Enter your NIE number", "Z324402S")
    config["FULL_NAME"] = get_input("Enter your full name", "MARBELLA CONTRERAS GUANIPA")
    config["PAIS_VALUE"] = get_input("Enter your country code", "248")
    config["PHONE"] = get_input("Enter your phone number", "600000000")
    config["EMAIL"] = get_input("Enter your email", "myemail@here.com")
    
    print("\n‚öôÔ∏è Bot Settings")
    config["PROVINCE"] = get_input("Enter province", "Barcelona")
    config["MAX_RETRIES"] = get_input("Enter max retries", "500")
    config["WAIT_SECS"] = get_input("Enter wait seconds", "30")
    config["TRANSITION_TIMEOUT"] = get_input("Enter transition timeout", "20")
    config["DOM_SIG_DELTA"] = get_input("Enter DOM signature delta", "50")
    
    print("\nü§ñ Captcha Settings")
    config["AUTO_CAPTCHA"] = get_input("Enable automatic captcha solving? (True/False)", "True")
    
    # Create .env file
    env_content = "# Cita Bot Configuration\n"
    env_content += "# Generated by setup_env.py\n\n"
    
    for key, value in config.items():
        env_content += f"{key}={value}\n"
    
    # Write to .env file
    try:
        with open(".env", "w") as f:
            f.write(env_content)
        print(f"\n‚úÖ .env file created successfully!")
        print(f"üìÅ File location: {os.path.abspath('.env')}")
        return True
    except Exception as e:
        print(f"\n‚ùå Error creating .env file: {e}")
        return False

def show_usage_instructions():
    """Show instructions for using the .env file"""
    print("\nüìñ Usage Instructions:")
    print("=" * 50)
    print("1. Your .env file has been created with your configuration")
    print("2. The bot will automatically read from this file")
    print("3. To run the bot:")
    print("   python new.py")
    print("   # or")
    print("   python example_optimized.py")
    print("\n4. To modify settings later, edit the .env file")
    print("5. To use different settings for different runs, set environment variables:")
    print("   export ANTICAPTCHA_API_KEY='different_key'")
    print("   python new.py")

def main():
    """Main function"""
    if os.path.exists(".env"):
        print("‚ö†Ô∏è  .env file already exists!")
        response = input("Do you want to overwrite it? (y/n): ").lower().strip()
        if response not in ['y', 'yes']:
            print("Setup cancelled.")
            return
    
    if create_env_file():
        show_usage_instructions()
        
        # Ask if user wants to test the configuration
        response = input("\nDo you want to test the configuration now? (y/n): ").lower().strip()
        if response in ['y', 'yes']:
            print("\nüß™ Testing configuration...")
            try:
                from dotenv import load_dotenv
                load_dotenv()
                
                # Check if key variables are loaded
                api_key = os.environ.get("ANTICAPTCHA_API_KEY")
                nie = os.environ.get("NIE")
                
                if api_key and nie:
                    print("‚úÖ Configuration test passed!")
                    print(f"   API Key: {api_key[:10]}...")
                    print(f"   NIE: {nie}")
                else:
                    print("‚ùå Configuration test failed!")
                    
            except ImportError:
                print("‚ö†Ô∏è  python-dotenv not installed. Install with: pip install python-dotenv")
            except Exception as e:
                print(f"‚ùå Configuration test error: {e}")
    else:
        print("\n‚ùå Setup failed. Please try again.")

if __name__ == "__main__":
    main() 